#include "Block.hpp"
#include <stdexcept>
#include "Function.hpp"
#include "Declarator.hpp"


std::string Block::get_code(){
  std::string code;
  
  // TODO variables globales
  
  for (auto f : functions){

    code += f.second->get_code();
  }

  

  return code;
}

void Block::add_declaration(std::vector<Declarator*> fList){
  for (Declarator* it : fList){ 
    if (variables.find(it->name) == variables.end()){
      variables.insert(std::pair<std::string, Declarator*>(it->name, it));
      }
    else{
      throw std::logic_error("variable already exist");
    }
  }
}


void Block::add_function(Function* fFunction){
  if (functions.find(fFunction->declarator->name) == functions.end()){
    functions.insert(std::pair<std::string, Function*>(fFunction->declarator->name, fFunction));
  }
  else{
    throw std::logic_error("function " + fFunction->declarator->name + " already exist");
  } 
}
